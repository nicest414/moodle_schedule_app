# 📱 わせジュール (Wasedule) APK解析レポート

## 🎯 アプリ概要
**わせジュール**は早稲田大学学生向けの時間割管理アプリで、単純な時間割アプリを超えた高度な機能を持つ

### 基本情報
- **パッケージ名**: `com.wasedule.wase_dule`
- **アーキテクチャ**: Flutter + Android ハイブリッド
- **対象ユーザー**: 早稲田大学学生
- **主要機能**: 時間割管理、Moodle連携、位置情報サービス、通知管理

---

## 🏗️ 技術アーキテクチャ

### フレームワーク構成
```
Flutter (Dart)
├── UI レイヤー (Flutter Widgets)
├── ビジネスロジック (Dart)
└── ネイティブ機能 (Android Java/Kotlin)
    ├── WebView 拡張システム
    ├── データベース群
    ├── 位置情報サービス
    ├── 通知システム
    └── カレンダー連携
```

### プラットフォーム統合
- **Flutter Engine**: Dart コードの実行環境
- **Platform Channels**: Flutter ⇔ Android 間の通信
- **WebView**: Moodle サイトとの連携基盤
- **Firebase**: クラウドデータベースとリアルタイム同期

---

## 🌐 WebView拡張システム ⭐

### 概要
ブラウザ拡張機能に匹敵する高度なWebスクレイピング機能を実装

### 主要コンポーネント
1. **JavaScriptBridgeInterface** 
   - Flutter と WebView JavaScript 間の双方向通信
   - リアルタイムデータ交換とイベント処理

2. **カスタムJavaScriptファイル群**
   ```javascript
   // Moodleコースボタン取得
   get_course_button.js
   
   // 成績データ抽出  
   get_myGrade.js
   
   // ローディング画面制御
   show_loading_screen.js
   ```

3. **DOM操作機能**
   - ページ読み込み時の自動スクリプト注入
   - リアルタイムHTML要素操作
   - フォーム自動入力とデータ抽出

### 技術的特徴
- **リアルタイム注入**: ページロード時に自動でJavaScript実行
- **双方向通信**: WebView ↔ Flutter 間でデータやりとり
- **エラーハンドリング**: スクリプト実行失敗時の適切な処理
- **セキュリティ**: 安全なスクリプト実行環境

---

## 🗄️ データベースアーキテクチャ

### マルチデータベース構成
アプリは用途別に**4つの異なるデータベースシステム**を使用

#### 1. **Firestore (クラウドDB)**
```
├── リアルタイム同期
├── クロスデバイス対応  
├── オフライン対応
└── 学生データ・時間割データ保存
```

#### 2. **SQLite (ローカルDB)**
```
├── Room Database (Android Jetpack)
├── 自動マイグレーション
├── 型安全なクエリ
└── オフライン時のメインストレージ
```

#### 3. **認証情報データベース**
```java
// HTTPSサイトの認証情報を安全に保存
CredentialDatabase.java
├── URLCredentialDao (認証情報管理)
├── URLProtectionSpaceDao (保護領域管理)  
└── 暗号化された認証データ保存
```

#### 4. **WebStorage管理**
```java
MyWebStorage.java
├── LocalStorage 管理
├── SessionStorage 管理
├── IndexedDB 操作
└── WebView内データ永続化
```

---

## 📍 位置情報サービス

### 高精度位置追跡システム
早稲田大学キャンパス内での学生の位置を正確に把握

### 主要機能
1. **フォアグラウンドサービス**
   ```java
   GeolocatorLocationService.java
   ├── バックグラウンド位置追跡
   ├── 永続的な通知表示
   ├── Wake Lock による連続動作
   └── バッテリー最適化対応
   ```

2. **位置プロバイダー**
   - **GPS**: 衛星測位による高精度位置
   - **Network**: WiFi/セルラーによる補完
   - **Fused Location**: Google Play Services統合
   - **GNSS**: 詳細な衛星情報取得

3. **精度管理**
   ```java
   LocationRequest.java
   ├── 更新間隔: 1秒〜数分
   ├── 精度要求: HIGH_ACCURACY
   ├── 最小距離: メートル単位
   └── タイムアウト設定
   ```

### パワーマネジメント
- **スマート間隔調整**: 移動状況に応じた更新頻度
- **Wake Lock**: 画面オフ時も位置追跡継続  
- **DoZe Mode対応**: Android 6.0以降の省電力モード対応
- **Background Limitations**: Android 8.0以降の制限回避

---

## 🔔 通知システム

### 包括的通知管理
学生生活に必要な様々な通知を統合管理

### 通知タイプ
1. **ローカル通知**
   - 授業開始アラーム
   - 課題締切リマインダー
   - 時間割変更通知

2. **メディア通知**
   ```xml
   notification_template_media_custom.xml
   ├── 音声・動画コンテンツ用レイアウト
   ├── 再生/停止コントロール
   ├── タイムスタンプ表示
   └── プログレス表示
   ```

3. **永続通知**
   - 位置追跡サービス状態
   - バックグラウンド同期状況

### 高度な機能
- **正確なアラーム**: Android 12以降の `SCHEDULE_EXACT_ALARM` 権限
- **バッジ通知**: 各メーカー対応のアプリアイコンバッジ
- **通知チャンネル**: カテゴリ別通知管理
- **Do Not Disturb**: ユーザー設定との連携

---

## 📅 カレンダー統合

### デバイスカレンダー連携
```java
CalendarDelegate.java
├── 読み取り権限: READ_CALENDAR
├── 書き込み権限: WRITE_CALENDAR  
├── イベント作成・更新・削除
└── 複数カレンダー対応
```

### 同期機能
- **双方向同期**: アプリ ↔ デバイスカレンダー
- **重複防止**: 同一イベントの重複作成防止
- **更新検知**: カレンダー変更の自動反映
- **削除同期**: イベント削除の双方向反映

---

## 🎓 Moodle連携システム

### Webスクレイピング機能
早稲田大学のMoodleサイトから自動でデータ取得

### 抽出データ
1. **コース情報**
   ```javascript
   // get_course_button.js で実装
   ├── 履修科目一覧
   ├── 担当教員情報
   ├── 教室・時間情報
   └── シラバスリンク
   ```

2. **成績情報**
   ```javascript
   // get_myGrade.js で実装  
   ├── 各科目の成績
   ├── GPA計算
   ├── 単位取得状況
   └── 成績分布
   ```

3. **課題・テスト情報**
   - 提出期限
   - 課題詳細
   - テスト日程
   - 評価基準

### 自動化機能
- **ログイン自動化**: 認証情報の安全な保存・使用
- **定期データ更新**: バックグラウンドでの情報同期
- **変更検知**: 新しい課題やお知らせの自動検出
- **エラー処理**: ネットワーク障害やサイト変更への対応

---

## 🔐 セキュリティ・権限管理

### Android権限
```xml
AndroidManifest.xml で定義された権限:
├── ACCESS_FINE_LOCATION (精密位置)
├── ACCESS_COARSE_LOCATION (概略位置)  
├── ACCESS_BACKGROUND_LOCATION (バックグラウンド位置)
├── SCHEDULE_EXACT_ALARM (正確なアラーム)
├── READ_CALENDAR (カレンダー読み取り)
├── WRITE_CALENDAR (カレンダー書き込み)
├── INTERNET (ネットワーク通信)
├── WAKE_LOCK (Wake Lock)
├── FOREGROUND_SERVICE (フォアグラウンドサービス)
└── CAMERA (カメラアクセス)
```

### データ保護
- **暗号化**: 認証情報の暗号化保存
- **HTTPS通信**: 全ての外部通信でSSL/TLS使用
- **権限最小化**: 必要最小限の権限のみ要求
- **サンドボックス**: Android アプリサンドボックス内で実行

---

## 🎨 UI/UX設計

### レイアウトシステム
```xml
notification_template_media_custom.xml
├── LinearLayout (水平レイアウト)
├── アイコングループ (include)
├── メインコンテンツ領域
│   ├── DateTimeView (時刻表示)
│   ├── Chronometer (経過時間)
│   └── TextView (情報表示)
├── メディアアクション (再生/停止等)
└── キャンセルアクション
```

### デザインシステム
- **Material Design**: Android標準デザインガイドライン準拠
- **レスポンシブ**: 様々な画面サイズ対応
- **アクセシビリティ**: 視覚障害者向け対応
- **ダークモード**: システム設定連動

---

## ⚡ パフォーマンス最適化

### バックグラウンド処理
1. **WorkManager**: 遅延実行タスクの管理
2. **JobScheduler**: システム最適化されたジョブ実行
3. **AlarmManager**: 正確な時刻でのタスク実行
4. **ForegroundService**: 長時間バックグラウンド処理

### メモリ管理
- **遅延読み込み**: 必要時のみデータロード
- **キャッシュ戦略**: 頻繁アクセスデータの効率的保存
- **リソース解放**: 適切なメモリリーク防止
- **ガベージコレクション**: Dart/Java両方での適切なメモリ管理

### ネットワーク最適化
- **接続プール**: HTTP接続の再利用
- **圧縮**: データ転送量の削減
- **オフライン対応**: ネットワーク断絶時の継続動作
- **リトライ機構**: 失敗時の自動再試行

---

## 🔧 開発・デバッグ機能

### ログシステム
- **階層ログ**: INFO、WARNING、ERROR レベル
- **クラッシュレポート**: 自動エラー収集
- **パフォーマンス監視**: 処理時間・メモリ使用量追跡
- **ユーザー行動分析**: 匿名化された使用統計

### 設定・構成
```
firebase-*.properties
├── Firebase設定
├── 認証キー
├── プロジェクト設定
└── 機能フラグ
```

---

## 📊 技術的評価

### 🌟 **優れた点**
1. **高度なWebView活用**: ブラウザ拡張レベルの機能実装
2. **マルチDB設計**: 用途別最適化されたデータ管理
3. **包括的位置サービス**: 企業レベルの精度と効率性
4. **モダンAndroid対応**: 最新API・権限システム完全対応
5. **セキュリティ**: 学生データの適切な保護

### ⚠️ **注意点**
1. **複雑性**: 多機能すぎてメンテナンスが大変そう
2. **バッテリー消費**: 位置追跡とバックグラウンド処理で電池食いそう
3. **権限要求**: 多くの権限でユーザーが警戒するかも
4. **Moodle依存**: サイト仕様変更で機能停止リスク
5. **学習コスト**: 機能が多すぎて使いこなすのが大変

---

## 🎯 まとめ

**わせジュール**は単純な時間割アプリの範疇を大きく超えた、**モバイルアプリ開発の技術展示場**みたいな作品 🚀

### 技術的ハイライト
- WebView を使った **ブラウザ拡張システム**
- **4種類のデータベース** を使い分ける設計
- **企業レベルの位置情報サービス**
- **リアルタイムクラウド同期**
- **包括的な権限・セキュリティ管理**

早稲田大学の学生が作ったにしては技術レベルが異常に高くて、正直商用アプリとしても通用するクオリティ 😱✨

ただし、機能が多すぎて「何でもできるけど何が主要機能かわからない」状態になってる感もある。時間割アプリとしてはオーバーエンジニアリングかもしれないけど、技術的学習価値は計り測れない 💪

---

## 📂 重要ファイル一覧

### WebView拡張システム
- `JavaScriptBridgeInterface.java`
- `get_course_button.js`
- `get_myGrade.js`  
- `show_loading_screen.js`

### データベース関連
- `CredentialDatabase.java`
- `MyWebStorage.java`
- `b1.java` (SQLite実装)
- Firebase Firestore関連Java群

### 位置情報サービス
- `GeolocatorLocationService.java`
- `LocationRequest.java`
- `LocationResult.java`

### 通知・UI
- `notification_template_media_custom.xml`
- `FlutterLocalNotificationsPlugin.java`
- `CalendarDelegate.java`

### 設定・権限
- `AndroidManifest.xml`
- 各種`.properties`ファイル

---

*解析完了: 2025年5月28日*  
*技術レベル: 🔥🔥🔥🔥🔥 (異常に高い)*
